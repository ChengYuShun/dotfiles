#!/usr/bin/env python3

# Copyright 2023  Yushun Cheng <chengys@disroot.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import subprocess
from tempfile import TemporaryDirectory
from argparse import ArgumentParser
from pathlib import Path

default_dpi = 144


if __name__ == "__main__":
    # Create the parser.
    parser = ArgumentParser(description="Invert a PDF file.")

    # Add arguments.
    parser.add_argument("input", help="input filename")
    parser.add_argument("output", help="output filename, will be overwritten "
                        "if it already exists")
    parser.add_argument("--dpi", "-d", type=int,
                        help="DPI kept while inverting")

    # Parse args.
    args = vars(parser.parse_args())

    # Prepare variables.
    input_path = Path(args["input"])
    output_path = Path(args["output"])
    dpi = args["dpi"]
    if dpi is None:
        dpi = default_dpi

    with TemporaryDirectory() as dirname:
        # Open a temporary directory.

        # Get temporary path.
        temp_path = Path(dirname)

        # Convert to JPEGs.
        subprocess.run(["convert", "-density", str(dpi), input_path,
                        temp_path / "%d.jpeg"])

        # Get all page paths and invert every page.
        page_path_len = len(list(temp_path.glob('*')))
        inverted_paths = []
        for i in range(page_path_len):
            orig_path = temp_path / (str(i) + ".jpeg")
            inverted_path = temp_path / ("i" + str(i) + ".jpeg")
            inverted_paths.append(inverted_path)
            subprocess.run(["convert", "-negate", orig_path,
                            inverted_path])

        # Merge every page into a single file.
        subprocess.run(["convert"] + inverted_paths + [output_path])
